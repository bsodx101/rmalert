import asyncio
import requests
import re
import os
from aiogram import Bot
from telegram.error import TelegramError

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = os.getenv("TOKEN")
bot = Bot(token=TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
API_KEY = os.getenv("API_KEY")  
CHAT_ID = os.getenv("CHAT_ID")  
REDMINE_URL = os.getenv("REDMINE_URL") 
CHECK_INTERVAL = 180  
QUERY_ID = 2015 


def escape_markdown_v2(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–ª—ã """
    return re.sub(r'([_*.\[\]()~`>#+\-=|{}.!])', r'\\\1', text)


def priority_to_text(priority_id):
    """ID –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ > —Ç–µ–∫—Å—Ç."""
    if priority_id == 3:
        return "‚ö†Ô∏è–í—ã—Å–æ–∫–∏–π"
    elif priority_id == 4:
        return "üö®–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ôüö®"
    return "C—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ query_id
def get_issues(query_id):
    url = f'{REDMINE_URL}/issues.json?query_id={query_id}'
    headers = {
        'X-Redmine-API-Key': API_KEY,
        'Content-Type': 'application/json'
    }
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        print(f"–ü–æ–ª—É—á–µ–Ω—ã –∑–∞–¥–∞—á–∏: {response.json()}")  # –õ–æ–≥–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {e}")
        return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–º–µ–Ω–∏–ª –ø–∞—Ä–∞–º–µ—Ç—Ä assigned_to
def get_last_assigned_user(issue_id):
    url = f'{REDMINE_URL}/issues/{issue_id}.json?include=journals'
    headers = {
        'X-Redmine-API-Key': API_KEY,
        'Content-Type': 'application/json'
    }
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        journals = response.json().get('issue', {}).get('journals', [])

        for journal in reversed(journals):  # –ò–¥–µ–º desc
            for detail in journal.get('details', []):
                if detail.get('property') == 'attr' and detail.get('name') == 'assigned_to_id':
                    return journal.get('user', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        return ""
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∂—É—Ä–Ω–∞–ª–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ {issue_id}: {e}")
        return "–∞–≤—Ç–æ—Ä "


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–∞–¥–∞—á if priority_id in [1, 2, 3, 4]
def parse_issues(data):
    issues = []
    total_count = data['total_count']  # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á
    for issue in data['issues']:
        priority_id = issue['priority']['id']
        subject = issue['subject']
        status = issue['status']['name']
        project = issue['project']['name']
        issue_id = issue['id']
        issue_url = f'{REDMINE_URL}/issues/{issue_id}'
        author = issue.get('author', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∞–≤—Ç–æ—Ä–∞

        if priority_id in [1, 2, 3, 4]: # –º–æ–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤—ã—Å–æ–∫–∏–π –∏–ª–∏ –∫—Ä–∏—Ç
            issues.append({
                'id': issue_id,
                'subject': subject,
                'priority_id': priority_id,
                'status': status,
                'project': project,
                'url': issue_url,
                'author': author
            })
    print(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: {issues}")
    return issues, total_count


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
async def send_telegram_message(message):
    try:
        message = escape_markdown_v2(message)  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {message}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await bot.send_message(chat_id=CHAT_ID, text=message, parse_mode='MarkdownV2')
        print("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except TelegramError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
async def track_page():
    last_issues = []  # –•—Ä–∞–Ω–∏–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞—á

    while True:
        data = get_issues(QUERY_ID)
        if data:
            current_issues, total_count = parse_issues(data)

            new_issues = [issue for issue in current_issues if issue not in last_issues]
            if new_issues:
                message = "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞ !HELPDESK:\n"
                for issue in new_issues:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–∑–º–µ–Ω–∏–≤—à–µ–≥–æ assigned_to
                    last_assigned_user = get_last_assigned_user(issue['id'])
                    message += (
                        f"–ü—Ä–æ–µ–∫—Ç: {issue['project']}\n"
                        f"–¢–µ–º–∞: {issue['subject']}\n"
                        f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority_to_text(issue['priority_id'])}\n"
                        f"–°—Ç–∞—Ç—É—Å: {issue['status']}\n"
                        f"–ê–≤—Ç–æ—Ä: {issue['author']}\n"  
                        f"–ù–∞–∑–Ω–∞—á–∏–ª(–∞): {last_assigned_user}\n"
                        f"üçè {issue['url']}\n\n"
                    )
                # —Ç–æ—Ç–∞–ª
                message += f"–í—Å–µ–≥–æ –∑–∞–¥–∞—á üëâüèª{total_count}üëàüèª"

                await send_telegram_message(message)
                last_issues.extend(new_issues)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–¥–∞—á
            else:
                print("–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")

        await asyncio.sleep(CHECK_INTERVAL)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π


if __name__ == '__main__':
    asyncio.run(track_page())
